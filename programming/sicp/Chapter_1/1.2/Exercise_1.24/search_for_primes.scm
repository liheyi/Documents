(define (search-for-primes n)
  (define (search-consecutive-prime n count)
    (define (next-odd n)
      (define (odd n) (= (remainder n 2) 1))
      (if (odd n) (+ n 2) (+ n 1)))
    (define (fast-prime n times)
      (define (expmod base expo m)
        (define (even n) (= (remainder n 2) 0))
        (cond ((= expo 0) 1)
              ((even expo) (remainder (square (expmod base (/ expo 2) m)) m))
              (else (remainder (* base (expmod base (- expo 1) m)) m))))
      (define (fermat-test n)
        (define (try-it a) (= (expmod a n n) a))
        (try-it (+ 1 (random (- n 1)))))
      (cond ((= times 0) true)
            ((fermat-test n) (fast-prime n (- times 1)))
            (else false)))
    (cond ((= count 0) (display "are primes."))
          ((fast-prime n 1000)
           (display n)
           (newline)
           (search-consecutive-prime (next-odd n) (- count 1)))
          (else (search-consecutive-prime (next-odd n) count))))
  (let ((start-time (real-time-clock)))
        (search-consecutive-prime n 3)
       (- (real-time-clock) start-time)))
